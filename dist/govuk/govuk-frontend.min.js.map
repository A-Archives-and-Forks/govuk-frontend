{"version":3,"file":"govuk-frontend.min.js","sources":["../../src/govuk/common/govuk-frontend-version.mjs","../../src/govuk/common/index.mjs","../../src/govuk/common/normalise-dataset.mjs","../../src/govuk/errors/index.mjs","../../src/govuk/govuk-frontend-component.mjs","../../src/govuk/i18n.mjs","../../src/govuk/components/accordion/accordion.mjs","../../src/govuk/components/button/button.mjs","../../src/govuk/common/closest-attribute-value.mjs","../../src/govuk/components/character-count/character-count.mjs","../../src/govuk/components/checkboxes/checkboxes.mjs","../../src/govuk/components/error-summary/error-summary.mjs","../../src/govuk/components/exit-this-page/exit-this-page.mjs","../../src/govuk/components/header/header.mjs","../../src/govuk/components/notification-banner/notification-banner.mjs","../../src/govuk/components/radios/radios.mjs","../../src/govuk/components/skip-link/skip-link.mjs","../../src/govuk/components/tabs/tabs.mjs","../../src/govuk/all.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error(\n      'Provide a `namespace` of type \"string\" to filter the `configObject` by.'\n    )\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (\n      Object.prototype.hasOwnProperty.call(configObject, key) &&\n      keyParts[0] === namespace\n    ) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement} [$scope] - The `<body>` element of the document to check for support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {Config[ConfigKey]} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @typedef {import('govuk-frontend').Config} Config - Config for all components via `initAll()`\n * @typedef {import('govuk-frontend').ConfigKey} ConfigKey - Component config keys, e.g. `accordion` and `characterCount`\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  // eslint-disable-next-line jsdoc/require-jsdoc -- Nothing pertinent to document\n  constructor() {\n    super('GOV.UK Frontend is not supported in this browser')\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {Element | null} element - The element in error\n   * @param {object} options - Element error options\n   * @param {string} options.componentName - The name of the component throwing the error\n   * @param {string} options.identifier - An identifier that'll let the user understand which element has an error (variable name, CSS selector)\n   * @param {string | typeof HTMLElement} [options.expectedType] - The type that was expected for the identifier\n   */\n  constructor(element, { componentName, identifier, expectedType }) {\n    let reason = `${identifier} not found`\n\n    // Otherwise check for type mismatch\n    if (element) {\n      expectedType = expectedType || window.HTMLElement\n\n      reason =\n        typeof expectedType === 'string'\n          ? `${identifier} is not of type ${expectedType}`\n          : `${identifier} is not an instance of ${expectedType.name}`\n    }\n\n    super(`${componentName}: ${reason}`)\n  }\n}\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale =\n      (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(\n            `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n          )\n        }\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      window.Intl &&\n        'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport() {\n    return Boolean(\n      window.Intl &&\n        'NumberFormat' in window.Intl &&\n        Intl.NumberFormat.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (\n        Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)\n      ) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n */\nexport class Accordion extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Accordion',\n        identifier: '$module'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      return this\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    // Loop through sections\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        return\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections to\n      // open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$span || !$heading) {\n      return\n    }\n\n    // Create a button element that will replace the '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$module.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n    for (let i = 0; i < $span.attributes.length; i++) {\n      const attr = $span.attributes.item(i)\n      // Add all attributes but not ID as this is being added to\n      // the section heading ($headingText)\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, attr.nodeValue)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by `aria-labelledby` on the\n    // hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading\n    // For the snippet to work with JavaScript, it must be added before adding the page element to the\n    // page's DOM. See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the original `div` to the\n      // new `span`\n      // This is because the summary line text is now inside a button element, which can only contain\n      // phrasing content\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (let j = 0, l = $summary.attributes.length; j < l; ++j) {\n        const nodeName = $summary.attributes.item(j).nodeName\n        const nodeValue = $summary.attributes.item(j).nodeValue\n        $summarySpan.setAttribute(nodeName, nodeValue)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    // Loop through sections\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      // Store the state in sessionStorage when a change is triggered\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (\n      !$showHideIcon ||\n      !($showHideText instanceof HTMLElement) ||\n      !$button ||\n      !$content\n    ) {\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText instanceof HTMLElement) {\n      ariaLabelParts.push($headingText.textContent.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary instanceof HTMLElement) {\n      ariaLabelParts.push($summary.textContent.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen() {\n    // Get a count of all the Accordion sections\n    const sectionsCount = this.$sections.length\n    // Get a count of all Accordion sections that are expanded\n    const expandedSectionCount = this.$module.querySelectorAll(\n      `.${this.sectionExpandedClass}`\n    ).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    const newButtonText = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = newButtonText\n\n    // Swap icon, toggle class\n    if (expanded) {\n      this.$showAllIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      this.$showAllIcon.classList.add(this.downChevronIconClass)\n    }\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion. Since\n      // an `#id` should be unique and an `id` is required for `aria-` attributes\n      // `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId\n          ? window.sessionStorage.getItem(contentId)\n          : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by dividing its contents\n   * into thematic chunks.\n   * See https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @default\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result =\n        window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\nconst KEY_SPACE = 32\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n */\nexport class Button extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ButtonConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element} $module - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Button',\n        identifier: '$module'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Button.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.$module.addEventListener('keydown', (event) =>\n      this.handleKeyDown(event)\n    )\n    this.$module.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can activate things with the 'button'\n   * role, so we need to match the functionality of native HTML buttons\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.keyCode !== KEY_SPACE) {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen. This\n   * stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @default\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n","/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  extractConfigByNamespace,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $visibleCountMessage = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $screenReaderCountMessage = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength = Infinity\n\n  /**\n   * @param {Element} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Character count',\n        identifier: '$module'\n      })\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError($textarea, {\n        componentName: 'Character count',\n        identifier: '.govuk-js-character-count',\n        expectedType: 'HTMLTextareaElement or HTMLInputElement'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change the\n    // type of count, we need to reset the `maxlength` and `maxwords` from the\n    // JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config || {},\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Character count: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords || this.config.maxlength\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError($textareaDescription, {\n        componentName: 'Character count',\n        identifier: `#${textareaDescriptionId}`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if ($textareaDescription.textContent.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n   * the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      this.$visibleCountMessage.classList.remove(\n        'govuk-character-count__message--disabled'\n      )\n    } else {\n      this.$visibleCountMessage.classList.add(\n        'govuk-character-count__message--disabled'\n      )\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      this.$textarea.classList.add('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-hint')\n      this.$visibleCountMessage.classList.add('govuk-error-message')\n    } else {\n      this.$textarea.classList.remove('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-error-message')\n      this.$visibleCountMessage.classList.add('govuk-hint')\n    }\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    } else {\n      return text.length\n    }\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @default\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block â€“\n   * for example, a checkbox for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the checkbox state.\n   *\n   * @param {Element} $module - HTML element to use for checkboxes\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Checkboxes',\n        identifier: `[data-module=\"${Checkboxes.moduleName}\"]`\n      })\n    }\n\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError(null, {\n        componentName: 'Checkboxes',\n        identifier: 'input[type=\"checkbox\"]'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError(null, {\n          componentName: 'Checkboxes',\n          identifier: `#${targetId}`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if (\n      $target &&\n      $target.classList.contains('govuk-checkboxes__conditional')\n    ) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a checkbox, sync\n   * the state of any associated conditional reveal with the checkbox state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in configuration.\n *\n * @preserve\n */\nexport class ErrorSummary extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ErrorSummaryConfig}\n   */\n  config\n\n  /**\n   * @param {Element} $module - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Error summary',\n        identifier: '$module'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      ErrorSummary.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Focus the error summary\n   *\n   * @private\n   */\n  setFocus() {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    // Set tabindex to -1 to make the element programmatically focusable, but\n    // remove it on blur as the error summary doesn't need to be focused again.\n    this.$module.setAttribute('tabindex', '-1')\n\n    this.$module.addEventListener('blur', () => {\n      this.$module.removeAttribute('tabindex')\n    })\n\n    this.$module.focus()\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if (this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n   * (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = this.getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash) from a URL, but not including\n   * the hash.\n   *\n   * @private\n   * @param {string} url - URL\n   * @returns {string | undefined} Fragment from URL, without the hash\n   */\n  getFragmentFromUrl(url) {\n    if (url.indexOf('#') === -1) {\n      return undefined\n    }\n\n    return url.split('#').pop()\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no associated\n   *   legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ||\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @default\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Exit this page',\n        identifier: '$module'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLElement)) {\n      throw new ElementError($button, {\n        componentName: 'Exit this page',\n        identifier: 'Button',\n        expectedType: HTMLElement\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    // Show or hide the indicator container depending on keypressCounter value\n    if (this.keypressCounter > 0) {\n      this.$indicatorContainer.classList.add(\n        'govuk-exit-this-page__indicator--visible'\n      )\n    } else {\n      this.$indicatorContainer.classList.remove(\n        'govuk-exit-this-page__indicator--visible'\n      )\n    }\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.getAttribute('href')\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId !== null) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId !== null) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId !== null) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    window.clearTimeout(this.keypressTimeoutId)\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    window.clearTimeout(this.keypressTimeoutId)\n    this.keypressTimeoutId = null\n\n    this.keypressCounter = 0\n    this.$updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      this.$updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @deprecated Will be made private in v5.0\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.textContent = ''\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @default\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to\n   * big and back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to\n   * detect when a screen size change happens. We rely on it being null if the\n   * feature isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the browser\n   * viewport moves between states.\n   *\n   * @param {Element} $module - HTML element to use for header\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Header',\n        identifier: '$module'\n      })\n    }\n\n    this.$module = $module\n    const $menuButton = $module.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation.\n    // When they don't, the menu toggle won't be rendered\n    // by our macro (or may be omitted when writing plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    if (!($menuButton instanceof HTMLElement)) {\n      throw new ElementError($menuButton, {\n        componentName: 'Header',\n        identifier: '.govuk-js-header-toggle'\n      })\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError(null, {\n        componentName: 'Header',\n        identifier: '.govuk-js-header-toggle[aria-controls]'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n\n    if (!($menu instanceof HTMLElement)) {\n      throw new ElementError($menu, {\n        componentName: 'Header',\n        identifier: `#${menuId}`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    // Set the matchMedia to the govuk-frontend desktop breakpoint\n    this.mql = window.matchMedia('(min-width: 48.0625em)')\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.syncState())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.syncState())\n    }\n\n    this.syncState()\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  syncState() {\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.syncState()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n */\nexport class NotificationBanner extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Notification banner',\n        identifier: '$module'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n  }\n\n  /**\n   * Focus the element\n   *\n   * If `role=\"alert\"` is set, focus the element to help some assistive technologies\n   * prioritise announcing it.\n   *\n   * You can turn off the auto-focus functionality by setting `data-disable-auto-focus=\"true\"` in the\n   * component HTML. You might wish to do this based on user research findings, or to avoid a clash\n   * with another element which should be focused when the page loads.\n   *\n   * @private\n   */\n  setFocus() {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    if (this.$module.getAttribute('role') !== 'alert') {\n      return\n    }\n\n    // Set tabindex to -1 to make the element focusable with JavaScript.\n    // Remove the tabindex on blur as the component doesn't need to be focusable after the page has\n    // loaded.\n    if (!this.$module.getAttribute('tabindex')) {\n      this.$module.setAttribute('tabindex', '-1')\n\n      this.$module.addEventListener('blur', () => {\n        this.$module.removeAttribute('tabindex')\n      })\n    }\n\n    this.$module.focus()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @default\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block â€“ for\n   * example, a radio for 'Phone' could reveal an additional form field for the\n   * user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the radio state.\n   *\n   * @param {Element} $module - HTML element to use for radios\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Radios',\n        identifier: `[data-module=\"${Radios.moduleName}\"]`\n      })\n    }\n\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $inputs = $module.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError(null, {\n        componentName: 'Radios',\n        identifier: 'input[type=\"radio\"]'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError(null, {\n          componentName: 'Radios',\n          identifier: `#${targetId}`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target && $target.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a radio\n   * in another $module)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n */\nexport class SkipLink extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $linkedElement\n\n  /** @private */\n  linkedElementListener = false\n\n  /**\n   * @param {Element} $module - HTML element to use for skip link\n   * @throws {ElementError} when $module is not set or the wrong type\n   * @throws {ElementError} when $module.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLAnchorElement)) {\n      throw new ElementError($module, {\n        componentName: 'Skip link',\n        identifier: '$module',\n        expectedType: HTMLAnchorElement\n      })\n    }\n\n    this.$module = $module\n    this.$linkedElement = this.getLinkedElement()\n\n    this.$module.addEventListener('click', () => this.focusLinkedElement())\n  }\n\n  /**\n   * Get linked element\n   *\n   * @private\n   * @returns {HTMLElement} $linkedElement - DOM element linked to from the skip link\n   */\n  getLinkedElement() {\n    const linkedElementId = this.getFragmentFromUrl(this.$module.hash)\n\n    // Check for link hash fragment\n    if (!linkedElementId) {\n      throw new ElementError(this.$module, {\n        componentName: 'Skip link',\n        identifier: '$module.hash',\n        expectedType: 'string'\n      })\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!($linkedElement instanceof HTMLElement)) {\n      throw new ElementError($linkedElement, {\n        componentName: 'Skip link',\n        identifier: `$module.hash target #${linkedElementId}`\n      })\n    }\n\n    return $linkedElement\n  }\n\n  /**\n   * Focus the linked element\n   *\n   * Set tabindex and helper CSS class. Set listener to remove them on blur.\n   *\n   * @private\n   */\n  focusLinkedElement() {\n    if (!this.$linkedElement.getAttribute('tabindex')) {\n      // Set the element tabindex to -1 so it can be focused with JavaScript.\n      this.$linkedElement.setAttribute('tabindex', '-1')\n      this.$linkedElement.classList.add('govuk-skip-link-focused-element')\n\n      // Add listener for blur on the focused element (unless the listener has previously been added)\n      if (!this.linkedElementListener) {\n        this.$linkedElement.addEventListener('blur', () =>\n          this.removeFocusProperties()\n        )\n        this.linkedElementListener = true\n      }\n    }\n\n    this.$linkedElement.focus()\n  }\n\n  /**\n   * Remove the tabindex that makes the linked element focusable because the element only needs to be\n   * focusable until it has received programmatic focus and a screen reader has announced it.\n   *\n   * Remove the CSS class that removes the native focus styles.\n   *\n   * @private\n   */\n  removeFocusProperties() {\n    this.$linkedElement.removeAttribute('tabindex')\n    this.$linkedElement.classList.remove('govuk-skip-link-focused-element')\n  }\n\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash) from a URL, but not including\n   * the hash.\n   *\n   * @private\n   * @param {string} url - URL\n   * @returns {string | undefined} Fragment from URL, without the hash\n   */\n  getFragmentFromUrl(url) {\n    if (url.indexOf('#') === -1) {\n      return undefined\n    }\n\n    return url.split('#').pop()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  keys = { left: 37, right: 39, up: 38, down: 40 }\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element} $module - HTML element to use for tabs\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Tabs',\n        identifier: '$module'\n      })\n    }\n\n    /** @satisfies {NodeListOf<HTMLAnchorElement>} */\n    const $tabs = $module.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError(null, {\n        componentName: 'Tabs',\n        identifier: `a.govuk-tabs__tab`\n      })\n    }\n\n    this.$module = $module\n    this.$tabs = $tabs\n\n    // Save bounded functions to use when removing event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError(null, {\n        componentName: 'Tabs',\n        identifier: `.govuk-tabs__list`\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError(null, {\n        componentName: 'Tabs',\n        identifier: `.govuk-tabs__list-item`\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    this.mql = window.matchMedia('(min-width: 40.0625em)')\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => {\n        this.checkMode()\n      })\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => {\n        this.checkMode()\n      })\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) || this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$module.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    // set tab attributes\n    const panelId = this.getHref($tab).slice(1)\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = this.getHref($tab).slice(1)\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab || !$currentTab.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    /** @satisfies {HTMLAnchorElement} */\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab || !$currentTab.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    /** @satisfies {HTMLAnchorElement} */\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    return this.$module.querySelector(this.getHref($tab))\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$module.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Get link hash fragment for href attribute\n   *\n   * this is because IE doesn't always return the actual value but a relative full path\n   * should be a utility function most prob\n   * {@link http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/}\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {string} Hash fragment including #\n   */\n  getHref($tab) {\n    const href = $tab.getAttribute('href')\n    const hash = href.slice(href.indexOf('#'), href.length)\n    return hash\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n","/* eslint-disable no-new */\n\nimport { version } from './common/govuk-frontend-version.mjs'\nimport { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    console.log(new SupportError())\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  const $scope = config.scope instanceof HTMLElement ? config.scope : document\n\n  components.forEach(([Component, config]) => {\n    const $elements = $scope.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n\n    $elements.forEach(($element) => {\n      try {\n        // Only pass config to components that accept it\n        'defaults' in Component\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  })\n}\n\nexport {\n  initAll,\n  version,\n\n  // Components\n  Accordion,\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  ExitThisPage,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n}\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Config for individual components\n *\n * @typedef {import('./components/accordion/accordion.mjs').AccordionConfig} AccordionConfig\n * @typedef {import('./components/accordion/accordion.mjs').AccordionTranslations} AccordionTranslations\n * @typedef {import('./components/button/button.mjs').ButtonConfig} ButtonConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfig} CharacterCountConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountTranslations} CharacterCountTranslations\n * @typedef {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} ErrorSummaryConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageConfig} ExitThisPageConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageTranslations} ExitThisPageTranslations\n * @typedef {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} NotificationBannerConfig\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n"],"names":["version","mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","join","isSupported","$scope","document","body","classList","contains","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","constructor","args","super","this","name","SupportError","ConfigError","ElementError","element","componentName","identifier","expectedType","reason","window","HTMLElement","GOVUKFrontendComponent","checkSupport","I18n","translations","config","locale","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","Accordion","$module","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","browserSupportsSessionStorage","$showAllButton","$showAllIcon","$showAllText","defaults","querySelectorAll","helper","checkForSessionStorage","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","createElement","setAttribute","add","appendChild","$accordionControls","insertBefore","firstChild","addEventListener","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","index","$span","$heading","$summary","$button","id","attributes","attr","item","nodeName","nodeValue","$headingText","$headingTextFocus","innerHTML","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","j","l","parentNode","replaceChild","removeChild","$fragment","target","Element","closest","expanded","storeState","nowExpanded","$content","newButtonText","textContent","ariaLabelParts","push","ariaLabelMessage","removeAttribute","remove","toString","rememberExpanded","contentId","getAttribute","contentState","sessionStorage","setItem","getItem","$punctuationEl","moduleName","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","testString","result","removeItem","exception","Button","debounceFormSubmitTimer","handleKeyDown","debounce","$target","keyCode","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","closestAttributeValue","$element","attributeName","$closestElementWithAttribute","CharacterCount","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","maxLength","Infinity","HTMLTextAreaElement","HTMLInputElement","datasetConfig","configOverrides","maxlength","undefined","maxwords","errors","schema","validationErrors","conditions","entries","required","errorMessage","every","validateConfig","textareaDescriptionId","$textareaDescription","getElementById","insertAdjacentElement","className","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","getCountMessage","text","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf","Checkboxes","$inputs","$input","targetId","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","inputIsChecked","checked","toggle","unCheckAllInputsExcept","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","type","ErrorSummary","setFocus","disableAutoFocus","focus","focusTarget","HTMLAnchorElement","inputId","getFragmentFromUrl","href","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","url","indexOf","pop","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","ExitThisPage","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","buildIndicator","initUpdateSpan","initButtonClickHandler","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","$indicator","updateIndicator","exitPage","location","which","resetKeypressTimer","clearTimeout","setKeypressTimer","shiftKey","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime","Header","$menuButton","$menu","menuIsOpen","mql","menuId","matchMedia","syncState","addListener","handleMenuButtonClick","matches","NotificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","SkipLink","$linkedElement","linkedElementListener","getLinkedElement","focusLinkedElement","linkedElementId","hash","removeFocusProperties","Tabs","$tabs","$tabList","$tabListItems","keys","left","right","up","down","jsHiddenClass","changingHash","boundTabClick","boundTabKeydown","boundOnHashChange","onTabClick","onTabKeydown","onHashChange","setupResponsiveChecks","checkMode","setup","teardown","$item","$tab","setAttributes","hideTab","$activeTab","getTab","showTab","removeEventListener","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","getHref","slice","$panel","getPanel","$currentTab","$nextTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","parentElement","$nextTabListItem","nextElementSibling","$previousTabListItem","previousElementSibling","initAll","log","components","accordion","button","characterCount","errorSummary","exitThisPage","notificationBanner","scope","Component","error"],"mappings":"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"}