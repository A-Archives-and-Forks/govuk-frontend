{"version":3,"file":"password-input.bundle.mjs","sources":["../../../../src/govuk/common/closest-attribute-value.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/password-input/password-input.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string | undefined} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: string | boolean | number | undefined }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {ReturnType<typeof normaliseDataset>} */\n  const out = {}\n\n  for (const [key, value] of Object.entries(dataset)) {\n    out[key] = normaliseString(value)\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      }\n\n      return translationString\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      console.warn(\n        `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n      )\n\n      return 'other'\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  extractConfigByNamespace,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n */\nexport class PasswordInput extends GOVUKFrontendComponent {\n  /**\n   * @private\n   * @type {PasswordInputConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showHideButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $statusText = null\n\n  /**\n   * @param {Element} $module - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Password input',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$wrapper = $module\n    this.$input = $module.querySelector('input')\n\n    if (!(this.$input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        componentName: 'Password input',\n        element: this.$input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-password-input`)'\n      })\n    }\n\n    this.config = mergeConfigs(\n      PasswordInput.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    // Check for valid config\n    const errors = validateConfig(PasswordInput.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Password input: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Create and append the button element\n    this.$showHideButton = document.createElement('button')\n    this.$showHideButton.className =\n      'govuk-button govuk-button--secondary govuk-password-input__toggle'\n    this.$showHideButton.setAttribute('aria-controls', this.$input.id)\n    this.$showHideButton.setAttribute('type', 'button')\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t('showPasswordAriaLabel')\n    )\n    this.$showHideButton.innerHTML = this.i18n.t('showPassword')\n    this.$wrapper.insertBefore(this.$showHideButton, this.$input.nextSibling)\n\n    // Create and append the status text for screen readers\n    this.$statusText = document.createElement('span')\n    this.$statusText.className = 'govuk-visually-hidden'\n    this.$statusText.innerText = this.i18n.t('passwordHiddenAnnouncement')\n    this.$statusText.setAttribute('aria-live', 'polite')\n    this.$wrapper.insertBefore(this.$statusText, this.$input.nextSibling)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener(\n      'click',\n      this.togglePassword.bind(this)\n    )\n\n    // Bind form submit check, unless it's been disabled\n    if (this.$input.form && !this.config.disableFormSubmitCheck) {\n      this.$input.form.addEventListener('submit', () =>\n        this.revertToPasswordOnFormSubmit()\n      )\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event -\n   */\n  togglePassword(event) {\n    event.preventDefault()\n\n    if (!this.$showHideButton || !this.$statusText) {\n      return\n    }\n\n    this.$input.setAttribute(\n      'type',\n      this.$input.type === 'password' ? 'text' : 'password'\n    )\n    const passwordIsHidden = this.$input.type === 'password'\n    this.$showHideButton.innerHTML = passwordIsHidden\n      ? this.i18n.t('showPassword')\n      : this.i18n.t('hidePassword')\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      passwordIsHidden\n        ? this.i18n.t('showPasswordAriaLabel')\n        : this.i18n.t('hidePasswordAriaLabel')\n    )\n    this.$statusText.innerText = passwordIsHidden\n      ? this.i18n.t('passwordHiddenAnnouncement')\n      : this.i18n.t('passwordShownAnnouncement')\n  }\n\n  /**\n   * Revert the input to type=password when the form is submitted. This prevents\n   * user agents potentially saving or caching the plain text password.\n   */\n  revertToPasswordOnFormSubmit() {\n    if (!this.$showHideButton || !this.$statusText) {\n      return\n    }\n\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t('showPasswordAriaLabel')\n    )\n    this.$showHideButton.innerHTML = this.i18n.t('showPassword')\n    this.$statusText.innerText = this.i18n.t('passwordHiddenAnnouncement')\n    this.$input.setAttribute('type', 'password')\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    disableFormSubmitCheck: false,\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({})\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {boolean} [disableFormSubmitCheck=false] - If set to `true` the\n *   password input will not automatically change back to the `password` type\n *   upon submission of the parent form.\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. HTML is acceptable.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. HTML is acceptable.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","mergeConfigs","configObjects","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","value","Object","entries","prefixedKey","formattedConfigObject","extractConfigByNamespace","namespace","newObject","keyParts","split","length","shift","newKey","join","isSupported","$scope","document","body","classList","contains","validateConfig","schema","config","validationErrors","name","conditions","errors","required","errorMessage","every","push","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","Error","constructor","args","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","messageOrOptions","message","componentName","identifier","element","expectedType","GOVUKFrontendComponent","checkSupport","I18n","translations","_config$locale","locale","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","Intl","NumberFormat","supportedLocalesOf","undefined","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","call","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","includes","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","PasswordInput","$module","$showHideButton","$statusText","HTMLElement","$wrapper","$input","querySelector","HTMLInputElement","defaults","i18n","createElement","className","setAttribute","id","innerHTML","insertBefore","nextSibling","innerText","addEventListener","togglePassword","bind","form","disableFormSubmitCheck","revertToPasswordOnFormSubmit","event","preventDefault","type","passwordIsHidden","moduleName","freeze","showPassword","hidePassword","showPasswordAriaLabel","hidePasswordAriaLabel","passwordShownAnnouncement","passwordHiddenAnnouncement"],"mappings":"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"}