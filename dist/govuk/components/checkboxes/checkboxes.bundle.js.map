{"version":3,"file":"checkboxes.bundle.js","sources":["../../../../src/govuk/errors/index.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/components/checkboxes/checkboxes.mjs"],"sourcesContent":["/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  // eslint-disable-next-line jsdoc/require-jsdoc -- Nothing pertinent to document\n  constructor() {\n    super('GOV.UK Frontend is not supported in this browser')\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {Element | null} element - The element in error\n   * @param {object} options - Element error options\n   * @param {string} options.componentName - The name of the component throwing the error\n   * @param {string} options.identifier - An identifier that'll let the user understand which element has an error (variable name, CSS selector)\n   * @param {string | typeof HTMLElement} [options.expectedType] - The type that was expected for the identifier\n   */\n  constructor(element, { componentName, identifier, expectedType }) {\n    let reason = `${identifier} not found`\n\n    // Otherwise check for type mismatch\n    if (element) {\n      expectedType = expectedType || window.HTMLElement\n\n      reason =\n        typeof expectedType === 'string'\n          ? `${identifier} is not of type ${expectedType}`\n          : `${identifier} is not an instance of ${expectedType.name}`\n    }\n\n    super(`${componentName}: ${reason}`)\n  }\n}\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error(\n      'Provide a `namespace` of type \"string\" to filter the `configObject` by.'\n    )\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (\n      Object.prototype.hasOwnProperty.call(configObject, key) &&\n      keyParts[0] === namespace\n    ) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement} [$scope] - The `<body>` element of the document to check for support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {Config[ConfigKey]} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @typedef {import('govuk-frontend').Config} Config - Config for all components via `initAll()`\n * @typedef {import('govuk-frontend').ConfigKey} ConfigKey - Component config keys, e.g. `accordion` and `characterCount`\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block –\n   * for example, a checkbox for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the checkbox state.\n   *\n   * @param {Element} $module - HTML element to use for checkboxes\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Checkboxes',\n        identifier: `[data-module=\"${Checkboxes.moduleName}\"]`\n      })\n    }\n\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError(null, {\n        componentName: 'Checkboxes',\n        identifier: 'input[type=\"checkbox\"]'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError(null, {\n          componentName: 'Checkboxes',\n          identifier: `#${targetId}`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if (\n      $target &&\n      $target.classList.contains('govuk-checkboxes__conditional')\n    ) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module – if the click occurred on a checkbox, sync\n   * the state of any associated conditional reveal with the checkbox state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n"],"names":["GOVUKFrontendError","Error","constructor","args","name","SupportError","ElementError","element","componentName","identifier","expectedType","reason","window","HTMLElement","isSupported","$scope","document","body","classList","contains","GOVUKFrontendComponent","checkSupport","Checkboxes","$module","$inputs","moduleName","querySelectorAll","length","forEach","$input","targetId","getAttribute","getElementById","setAttribute","removeAttribute","addEventListener","syncAllConditionalReveals","event","handleClick","syncConditionalRevealWithInputState","$target","inputIsChecked","checked","toString","toggle","unCheckAllInputsExcept","allInputsWithSameName","$inputWithSameName","hasSameFormOwner","form","unCheckExclusiveInputs","allInputsWithSameNameAndExclusiveBehaviour","$exclusiveInput","$clickedInput","target","HTMLInputElement","type","hasAriaControls","hasBehaviourExclusive"],"mappings":"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"}