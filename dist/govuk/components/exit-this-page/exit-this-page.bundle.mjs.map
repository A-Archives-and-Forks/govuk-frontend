{"version":3,"file":"exit-this-page.bundle.mjs","sources":["../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/exit-this-page/exit-this-page.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error(\n      'Provide a `namespace` of type \"string\" to filter the `configObject` by.'\n    )\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (\n      Object.prototype.hasOwnProperty.call(configObject, key) &&\n      keyParts[0] === namespace\n    ) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement} [$scope] - The `<body>` element of the document to check for support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {Config[ConfigKey]} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @typedef {import('govuk-frontend').Config} Config - Config for all components via `initAll()`\n * @typedef {import('govuk-frontend').ConfigKey} ConfigKey - Component config keys, e.g. `accordion` and `characterCount`\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  // eslint-disable-next-line jsdoc/require-jsdoc -- Nothing pertinent to document\n  constructor() {\n    super('GOV.UK Frontend is not supported in this browser')\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {Element | null} element - The element in error\n   * @param {object} options - Element error options\n   * @param {string} options.componentName - The name of the component throwing the error\n   * @param {string} options.identifier - An identifier that'll let the user understand which element has an error (variable name, CSS selector)\n   * @param {string | typeof HTMLElement} [options.expectedType] - The type that was expected for the identifier\n   */\n  constructor(element, { componentName, identifier, expectedType }) {\n    let reason = `${identifier} not found`\n\n    // Otherwise check for type mismatch\n    if (element) {\n      expectedType = expectedType || window.HTMLElement\n\n      reason =\n        typeof expectedType === 'string'\n          ? `${identifier} is not of type ${expectedType}`\n          : `${identifier} is not an instance of ${expectedType.name}`\n    }\n\n    super(`${componentName}: ${reason}`)\n  }\n}\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale =\n      (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(\n            `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n          )\n        }\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      window.Intl &&\n        'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport() {\n    return Boolean(\n      window.Intl &&\n        'NumberFormat' in window.Intl &&\n        Intl.NumberFormat.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (\n        Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)\n      ) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Exit this page',\n        identifier: '$module'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLElement)) {\n      throw new ElementError($button, {\n        componentName: 'Exit this page',\n        identifier: 'Button',\n        expectedType: HTMLElement\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    // Show or hide the indicator container depending on keypressCounter value\n    if (this.keypressCounter > 0) {\n      this.$indicatorContainer.classList.add(\n        'govuk-exit-this-page__indicator--visible'\n      )\n    } else {\n      this.$indicatorContainer.classList.remove(\n        'govuk-exit-this-page__indicator--visible'\n      )\n    }\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.getAttribute('href')\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId !== null) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId !== null) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId !== null) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    window.clearTimeout(this.keypressTimeoutId)\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    window.clearTimeout(this.keypressTimeoutId)\n    this.keypressTimeoutId = null\n\n    this.keypressCounter = 0\n    this.$updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      this.$updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @deprecated Will be made private in v5.0\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.textContent = ''\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @default\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n"],"names":["mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","newKey","join","isSupported","$scope","document","body","classList","contains","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","constructor","args","name","SupportError","ElementError","element","componentName","identifier","expectedType","reason","window","HTMLElement","GOVUKFrontendComponent","checkSupport","I18n","translations","config","locale","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","ExitThisPage","$module","i18n","$button","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","querySelector","defaults","HTMLAnchorElement","buildIndicator","initUpdateSpan","initButtonClickHandler","addEventListener","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","createElement","setAttribute","className","appendChild","handleClick","$indicator","updateIndicator","add","remove","$indicators","querySelectorAll","forEach","index","toggle","exitPage","textContent","location","href","getAttribute","event","preventDefault","keyCode","which","clearTimeout","setKeypressTimer","resetKeypressTimer","shiftKey","setTimeout","moduleName","freeze","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime"],"mappings":"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"}