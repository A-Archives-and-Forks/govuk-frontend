{"version":3,"file":"character-count.bundle.js","sources":["../../../../src/govuk/common/closest-attribute-value.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/character-count/character-count.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error(\n      'Provide a `namespace` of type \"string\" to filter the `configObject` by.'\n    )\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (\n      Object.prototype.hasOwnProperty.call(configObject, key) &&\n      keyParts[0] === namespace\n    ) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement} [$scope] - The `<body>` element of the document to check for support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {Config[ConfigKey]} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @typedef {import('govuk-frontend').Config} Config - Config for all components via `initAll()`\n * @typedef {import('govuk-frontend').ConfigKey} ConfigKey - Component config keys, e.g. `accordion` and `characterCount`\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  // eslint-disable-next-line jsdoc/require-jsdoc -- Nothing pertinent to document\n  constructor() {\n    super('GOV.UK Frontend is not supported in this browser')\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {Element | null} element - The element in error\n   * @param {object} options - Element error options\n   * @param {string} options.componentName - The name of the component throwing the error\n   * @param {string} options.identifier - An identifier that'll let the user understand which element has an error (variable name, CSS selector)\n   * @param {string | typeof HTMLElement} [options.expectedType] - The type that was expected for the identifier\n   */\n  constructor(element, { componentName, identifier, expectedType }) {\n    let reason = `${identifier} not found`\n\n    // Otherwise check for type mismatch\n    if (element) {\n      expectedType = expectedType || window.HTMLElement\n\n      reason =\n        typeof expectedType === 'string'\n          ? `${identifier} is not of type ${expectedType}`\n          : `${identifier} is not an instance of ${expectedType.name}`\n    }\n\n    super(`${componentName}: ${reason}`)\n  }\n}\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale =\n      (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(\n            `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n          )\n        }\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      window.Intl &&\n        'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport() {\n    return Boolean(\n      window.Intl &&\n        'NumberFormat' in window.Intl &&\n        Intl.NumberFormat.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (\n        Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)\n      ) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  extractConfigByNamespace,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $visibleCountMessage = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $screenReaderCountMessage = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength = Infinity\n\n  /**\n   * @param {Element} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($module, config) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError($module, {\n        componentName: 'Character count',\n        identifier: '$module'\n      })\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError($textarea, {\n        componentName: 'Character count',\n        identifier: '.govuk-js-character-count',\n        expectedType: 'HTMLTextareaElement or HTMLInputElement'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change the\n    // type of count, we need to reset the `maxlength` and `maxwords` from the\n    // JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config || {},\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Character count: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords || this.config.maxlength\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError($textareaDescription, {\n        componentName: 'Character count',\n        identifier: `#${textareaDescriptionId}`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if ($textareaDescription.textContent.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n   * the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      this.$visibleCountMessage.classList.remove(\n        'govuk-character-count__message--disabled'\n      )\n    } else {\n      this.$visibleCountMessage.classList.add(\n        'govuk-character-count__message--disabled'\n      )\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      this.$textarea.classList.add('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-hint')\n      this.$visibleCountMessage.classList.add('govuk-error-message')\n    } else {\n      this.$textarea.classList.remove('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-error-message')\n      this.$visibleCountMessage.classList.add('govuk-hint')\n    }\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    } else {\n      return text.length\n    }\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @default\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","newKey","join","isSupported","$scope","document","body","classList","contains","validateConfig","schema","config","validationErrors","name","conditions","entries","errors","required","errorMessage","every","push","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","constructor","args","SupportError","ConfigError","ElementError","element","componentName","identifier","expectedType","reason","window","HTMLElement","GOVUKFrontendComponent","checkSupport","I18n","translations","locale","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","CharacterCount","$module","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","i18n","maxLength","Infinity","querySelector","HTMLTextAreaElement","HTMLInputElement","datasetConfig","configOverrides","maxlength","undefined","maxwords","defaults","textareaDescriptionId","id","$textareaDescription","getElementById","textContent","insertAdjacentElement","createElement","className","setAttribute","add","removeAttribute","bindChangeEvents","addEventListener","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","getCountMessage","text","tokens","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","thresholdValue","moduleName","freeze","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf"],"mappings":"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"}