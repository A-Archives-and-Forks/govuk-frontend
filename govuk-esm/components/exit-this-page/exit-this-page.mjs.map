{"version":3,"file":"exit-this-page.mjs","sources":["../../../../src/govuk/components/exit-this-page/exit-this-page.mjs"],"sourcesContent":["/* eslint-disable es-x/no-function-prototype-bind -- Polyfill imported */\n\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { nodeListForEach, mergeConfigs, extractConfigByNamespace } from '../../common.mjs'\nimport { I18n } from '../../i18n.mjs'\nimport '../../vendor/polyfills/Element/prototype/classList.mjs'\nimport '../../vendor/polyfills/Element/prototype/dataset.mjs'\nimport '../../vendor/polyfills/Function/prototype/bind.mjs'\n\n/**\n * @constant\n * @type {ExitThisPageTranslations}\n * @see Default value for {@link ExitThisPageConfig.i18n}\n * @default\n */\nvar EXIT_THIS_PAGE_TRANSLATIONS = {\n  activated: 'Loading.',\n  timedOut: 'Exit this page expired.',\n  pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n  pressOneMoreTime: 'Shift, press 1 more time to exit.'\n}\n\n/**\n * JavaScript functionality for the Exit this Page component\n *\n * @class\n * @param {HTMLElement} $module - HTML element that wraps the EtP button\n * @param {ExitThisPageConfig} [config] - Exit this Page config\n */\nfunction ExitThisPage ($module, config) {\n  this.$module = $module\n\n  var defaultConfig = {\n    i18n: EXIT_THIS_PAGE_TRANSLATIONS\n  }\n\n  this.config = mergeConfigs(\n    defaultConfig,\n    config || {},\n    normaliseDataset($module.dataset)\n  )\n\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n  this.$button = $module.querySelector('.govuk-exit-this-page__button')\n  this.$skiplinkButton = document.querySelector('.govuk-js-exit-this-page-skiplink')\n  this.$updateSpan = null\n  this.$indicatorContainer = null\n  this.$overlay = null\n  this.keypressCounter = 0\n  this.lastKeyWasModified = false\n  this.timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n  this.keypressTimeoutId = null\n  this.timeoutMessageId = null\n}\n\n/**\n * Create the <span> we use for screen reader announcements.\n */\nExitThisPage.prototype.initUpdateSpan = function () {\n  this.$updateSpan = document.createElement('span')\n  this.$updateSpan.setAttribute('role', 'status')\n  this.$updateSpan.className = 'govuk-visually-hidden'\n\n  this.$module.appendChild(this.$updateSpan)\n}\n\n/**\n * Create button click handlers.\n */\nExitThisPage.prototype.initButtonClickHandler = function () {\n  // Main EtP button\n  this.$button.addEventListener('click', this.exitPage.bind(this))\n\n  // EtP skiplink\n  if (this.$skiplinkButton) {\n    this.$skiplinkButton.addEventListener('click', this.exitPage.bind(this))\n  }\n}\n\n/**\n * Create the HTML for the 'three lights' indicator on the button.\n */\nExitThisPage.prototype.buildIndicator = function () {\n  // Build container\n  // Putting `aria-hidden` on it as it won't contain any readable information\n  this.$indicatorContainer = document.createElement('div')\n  this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n  this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n  // Create three 'lights' and place them within the container\n  for (var i = 0; i < 3; i++) {\n    var $indicator = document.createElement('div')\n    $indicator.className = 'govuk-exit-this-page__indicator-light'\n    this.$indicatorContainer.appendChild($indicator)\n  }\n\n  // Append it all to the module\n  this.$button.appendChild(this.$indicatorContainer)\n}\n\n/**\n * Update whether the lights are visible and which ones are lit up depending on\n * the value of `keypressCounter`.\n */\nExitThisPage.prototype.updateIndicator = function () {\n  // Show or hide the indicator container depending on keypressCounter value\n  if (this.keypressCounter > 0) {\n    this.$indicatorContainer.classList.add('govuk-exit-this-page__indicator--visible')\n  } else {\n    this.$indicatorContainer.classList.remove('govuk-exit-this-page__indicator--visible')\n  }\n\n  // Turn out all the lights\n  var $lightsOn = this.$indicatorContainer.querySelectorAll('.govuk-exit-this-page__indicator-light--on')\n  nodeListForEach($lightsOn, function ($light) {\n    $light.classList.remove('govuk-exit-this-page__indicator-light--on')\n  })\n\n  // Turn on the ones we want on\n  var $lightsQueried = this.$indicatorContainer.querySelectorAll('.govuk-exit-this-page__indicator-light')\n  nodeListForEach($lightsQueried, function ($light, index) {\n    if (index < this.keypressCounter) {\n      $light.classList.add('govuk-exit-this-page__indicator-light--on')\n    }\n  }.bind(this))\n}\n\n/**\n * Initiates the redirection away from the current page.\n * Includes the loading overlay functionality, which covers the current page with a\n * white overlay so that the contents are not visible during the loading\n * process. This is particularly important on slow network connections.\n *\n * @param {MouseEvent} [event] - mouse click event\n */\nExitThisPage.prototype.exitPage = function (event) {\n  var redirectUrl = this.$button.getAttribute('href')\n\n  if (typeof event !== 'undefined' && event.target instanceof HTMLElement) {\n    event.preventDefault()\n    redirectUrl = event.target.getAttribute('href')\n  }\n\n  this.$updateSpan.innerText = ''\n\n  // Blank the page\n  // As well as creating an overlay with text, we also set the body to hidden\n  // to prevent screen reader and sequential navigation users potentially\n  // navigating through the page behind the overlay during loading\n  document.body.classList.add('govuk-exit-this-page-hide-content')\n  this.$overlay = document.createElement('div')\n  this.$overlay.className = 'govuk-exit-this-page-overlay'\n  this.$overlay.setAttribute('role', 'alert')\n\n  document.body.appendChild(this.$overlay)\n  this.$overlay.innerText = this.i18n.t('activated')\n\n  window.location.href = redirectUrl\n}\n\n/**\n * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n * Shift key three times without interruption, within a time limit).\n *\n * @param {KeyboardEvent} e - keyup event\n */\nExitThisPage.prototype.handleKeypress = function (e) {\n  // Detect if the 'Shift' key has been pressed. We want to only do things if it\n  // was pressed by itself and not in a combination with another keyâ€”so we keep\n  // track of whether the preceding keyup had shiftKey: true on it, and if it\n  // did, we ignore the next Shift keyup event.\n  //\n  // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n  // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n  // for Shift (with e.shiftKey: false).\n  if (\n    (e.key === 'Shift' || e.keyCode === 16 || e.which === 16) &&\n    !this.lastKeyWasModified\n  ) {\n    this.keypressCounter += 1\n\n    // Update the indicator before the below if statement can reset it back to 0\n    this.updateIndicator()\n\n    // Clear the timeout for the keypress timeout message clearing itself\n    if (this.timeoutMessageId !== null) {\n      clearTimeout(this.timeoutMessageId)\n      this.timeoutMessageId = null\n    }\n\n    if (this.keypressCounter >= 3) {\n      this.keypressCounter = 0\n\n      clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n\n      this.exitPage()\n    } else {\n      if (this.keypressCounter === 1) {\n        this.$updateSpan.innerText = this.i18n.t('pressTwoMoreTimes')\n      } else {\n        this.$updateSpan.innerText = this.i18n.t('pressOneMoreTime')\n      }\n    }\n\n    this.setKeypressTimer()\n  } else if (this.keypressTimeoutId !== null) {\n    // If the user pressed any key other than 'Shift', after having pressed\n    // 'Shift' and activating the timer, stop and reset the timer.\n    this.resetKeypressTimer()\n  }\n\n  // Keep track of whether the Shift modifier key was held during this keypress\n  this.lastKeyWasModified = e.shiftKey\n}\n\n/**\n * Starts the 'quick escape' keyboard sequence timer.\n *\n * This can be invoked several times. We want this to be possible so that the\n * timer is restarted each time the shortcut key is pressed (e.g. the user has\n * up to n seconds between each keypress, rather than n seconds to invoke the\n * entire sequence.)\n */\nExitThisPage.prototype.setKeypressTimer = function () {\n  // Clear any existing timeout. This is so only one timer is running even if\n  // there are multiple keypresses in quick succession.\n  clearTimeout(this.keypressTimeoutId)\n\n  // Set a fresh timeout\n  this.keypressTimeoutId = setTimeout(function () {\n    this.resetKeypressTimer()\n  }.bind(this), this.timeoutTime)\n}\n\n/**\n * Stops and resets the 'quick escape' keyboard sequence timer.\n */\nExitThisPage.prototype.resetKeypressTimer = function () {\n  clearTimeout(this.keypressTimeoutId)\n  this.keypressTimeoutId = null\n\n  this.keypressCounter = 0\n  this.$updateSpan.innerText = this.i18n.t('timedOut')\n\n  this.timeoutMessageId = setTimeout(function () {\n    this.$updateSpan.innerText = ''\n  }.bind(this), this.timeoutTime)\n\n  this.updateIndicator()\n}\n\n/**\n * Reset the page using the EtP button\n *\n * We use this in situations where a user may re-enter a page using the browser\n * back button. In these cases, the browser can choose to restore the state of\n * the page as it was previously, including restoring the 'ghost page' overlay,\n * the announcement span having it's role set to \"alert\" and the keypress\n * indicator still active, leaving the page in an unusable state.\n *\n * By running this check when the page is shown, we can programatically restore\n * the page and the component to a \"default\" state\n */\nExitThisPage.prototype.resetPage = function () {\n  // If an overlay is set, remove it and reset the value\n  document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n  if (this.$overlay) {\n    this.$overlay.remove()\n    this.$overlay = null\n  }\n\n  // Ensure the announcement span's role is status, not alert and clear any text\n  this.$updateSpan.setAttribute('role', 'status')\n  this.$updateSpan.innerText = ''\n\n  // Sync the keypress indicator lights\n  this.updateIndicator()\n\n  // If the timeouts are active, clear them\n  if (this.keypressTimeoutId) {\n    clearTimeout(this.keypressTimeoutId)\n  }\n\n  if (this.timeoutMessageId) {\n    clearTimeout(this.timeoutMessageId)\n  }\n}\n\n/**\n * Initialise component\n */\nExitThisPage.prototype.init = function () {\n  this.buildIndicator()\n  this.initUpdateSpan()\n  this.initButtonClickHandler()\n\n  // Check to see if this has already been done by a previous initialisation of ExitThisPage\n  if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n    document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n    document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n  }\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // blank overlay remains present, rendering the page unusable. Here, we check\n  // to see if it's present on page (re)load, and remove it if so.\n  window.addEventListener(\n    'onpageshow' in window ? 'pageshow' : 'DOMContentLoaded',\n    this.resetPage.bind(this)\n  )\n}\n\nexport default ExitThisPage\n\n/**\n * Exit this Page config\n *\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n = EXIT_THIS_PAGE_TRANSLATIONS] - See constant {@link EXIT_THIS_PAGE_TRANSLATIONS}\n */\n\n/**\n * Exit this Page translations\n *\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n"],"names":[],"mappings":"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"}