////
/// @group helpers/typography
////

@import "../tools/px-to-rem";

/// 'Common typography' helper
///
/// Sets the font family and associated properties, such as font smoothing. Also
/// overrides the font for print.
///
/// @param {List} $font-family [$govuk-font-family] Font family to use
/// @access public

@mixin govuk-typography-common($font-family: $govuk-font-family) {
  font-family: $font-family;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  // If the user is using the default GDS Transport font we need to include
  // the font-face declarations.
  @if $govuk-include-default-font-face {
    @include _govuk-font-face-gds-transport;
  }

  @include govuk-media-query($media-type: print) {
    font-family: $govuk-font-family-print;
  }
}

/// Text colour helper
///
/// Sets the text colour, including a suitable override for print.
///
/// @access public

@mixin govuk-text-colour {
  color: $govuk-text-colour;

  @include govuk-media-query($media-type: print) {
    color: $govuk-print-text-colour;
  }
}

/// Regular font weight helper
///
/// @param {Boolean} $important [false] - Whether to mark declarations as
///   `!important`. Generally Used to create override classes.
/// @access public

@mixin govuk-typography-weight-regular($important: false) {
  font-weight: $govuk-font-weight-regular if($important, !important, null);
}

/// Bold font weight helper
///
/// @param {Boolean} $important [false] - Whether to mark declarations as
///   `!important`. Generally Used to create override classes.
/// @access public

@mixin govuk-typography-weight-bold($important: false) {
  font-weight: $govuk-font-weight-bold if($important, !important, null);
}

/// Convert line-heights specified in pixels into a relative value, unless
/// they are already unit-less (and thus already treated as relative values)
/// or the units do not match the units used for the font size.
///
/// @param {Number} $line-height Line height
/// @param {Number} $font-size Font size
/// @return {Number} The line height as either a relative value or unmodified
///
/// @access private

@function _govuk-line-height($line-height, $font-size) {
  @if not unitless($line-height) and unit($line-height) == unit($font-size) {
    $line-height: $line-height / $font-size;
  }

  @return $line-height;
}

/// Responsive typography helper
///
/// Takes a point from the responsive 'font map' as an argument (the size as it
/// would appear on tablet and above), and uses it to create font-size and
/// line-height declarations for different breakpoints, and print.
///
/// Example font map:
///
/// 19: (
///   null: (
///     font-size: 16px,
///     line-height: 20px
///   ),
///   tablet: (
///     font-size: 19px,
///     line-height: 25px
///   ),
///   print: (
///     font-size: 14pt,
///     line-height: 1.15
///   )
/// );
///
/// @param {Number} $size - Point from the spacing scale (the size as it would
///   appear on tablet and above)
/// @param {Number} $override-line-height [false] - Non responsive custom line
///   height. Omit to use the line height from the font map.
/// @param {Boolean} $important [false] - Whether to mark declarations as
///   `!important`.
///
/// @throw if `$size` is not a valid point from the spacing scale
///
/// @access public

@mixin govuk-typography-responsive($size, $override-line-height: false, $important: false) {
  @if not map-has-key($govuk-typography-scale, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }

  $font-map: map-get($govuk-typography-scale, $size);

  @each $breakpoint, $breakpoint-map in $font-map {
    $font-size: map-get($breakpoint-map, "font-size");
    $font-size-rem: govuk-px-to-rem($font-size);

    $line-height: _govuk-line-height(
      $line-height: if($override-line-height, $override-line-height, map-get($breakpoint-map, "line-height")),
      $font-size: $font-size
    );

    // Mark rules as !important if $important is true - this will result in
    // these variables becoming strings, so this needs to happen *after* they
    // are used in calculations
    $font-size: $font-size if($important, !important, null);
    $font-size-rem: $font-size-rem if($important, !important, null);
    $line-height: $line-height if($important, !important, null);

    @if not $breakpoint {
      font-size: $font-size-rem;
      line-height: $line-height;
    } @else if $breakpoint == "print" {
      @include govuk-media-query($media-type: print) {
        font-size: $font-size;
        line-height: $line-height;
      }
    } @else {
      @include govuk-media-query($from: $breakpoint) {
        font-size: $font-size-rem;
        line-height: $line-height;
      }
    }
  }
}

/// Font helper
///
/// @param {Number | Boolean} $size Point from the spacing scale (the size as it
///   would appear on tablet and above). Use `false` to avoid setting a size.
/// @param {String} $weight [regular] - Weight: `bold` or `regular`
/// @param {Boolean} $tabular [false] - Whether to use tabular numbers or not
/// @param {Number} $line-height [false] - Line-height, if overriding the
///   default
///
/// @throw if `$size` is not a valid point from the spacing scale (or false)
///
/// @access public

@mixin govuk-font($size, $weight: regular, $tabular: false, $line-height: false) {
  @include govuk-typography-common;

  @if $tabular {
    font-feature-settings: "tnum" 1;

    @supports (font-variant-numeric: tabular-nums) {
      font-feature-settings: normal;
      font-variant-numeric: tabular-nums;
    }
  }

  @if $weight == regular {
    @include govuk-typography-weight-regular;
  } @else if $weight == bold {
    @include govuk-typography-weight-bold;
  }

  @if $size {
    @include govuk-typography-responsive($size, $override-line-height: $line-height);
  }
}

/// Font size helper
///
/// Get the font size and line height from the typography scale based on the
/// scale point and breakpoint specified. We expect a font map to follow this
/// rough format:
///
/// 24: (
///   null: (
///     font-size: 18px,
///     line-height: 20px
///   ),
///   tablet: (
///     font-size: 24px,
///     line-height: 30px
///   ),
///   print: (
///     font-size: 18pt,
///     line-height: 1.15
///   )
/// )
///
/// @param {Number} $size Point from the typography scale. Will break if a value
/// not from the typography scale is specified
/// @param {String} $breakpoint The breakpoint within the font map retrieved from
/// the typography scale via `$size`. Will break if a key not in the retrieved
/// font map is specified
/// @param {Number} $override-line-height [false] - line height value which will
/// override the line height retrieved from the breakpoint map
/// @param {Boolean} $print [true] - if the mixin should include the media query
/// for print styles or not

@mixin govuk-font-size($size, $breakpoint, $override-line-height: false, $print: true) {
  @if not map-has-key($govuk-typography-scale, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }

  $font-map: map-get($govuk-typography-scale, $size);

  @if not map-has-key($font-map, $breakpoint) {
    @error "Unknown breakpoint `#{$breakpoint}` - expected a breakpoint from the typography font maps such as `null` or `tablet`";
  }

  $breakpoint-map: map-get($font-map, $breakpoint);
  $font-size: map-get($breakpoint-map, "font-size");

  font-size: $font-size;
  line-height: _govuk-line-height(
    $line-height: if($override-line-height, $override-line-height, map-get($breakpoint-map, "line-height")),
    $font-size: $font-size
  );

  @if $print {
    $print-map: map-get($font-map, "print");
    $print-font-size: map-get($print-map, "font-size");
    $print-line-height: _govuk-line-height(
      $line-height: map-get($print-map, "line-height"),
      $font-size: $print-font-size
    );

    @include govuk-media-query($media-type: print) {
      font-size: $print-font-size;
      line-height: $print-line-height;
    }
  }
}

/// Responsive font size helper
///
/// Create font size and line height declarations across breakpoints. Like
/// `govuk-font-size` but runs through every breakpoint in a map and automatically
/// declares the font size and line height for that breakpoint within an associated
/// media query.
///
/// @param {Number} $size Point from the typography scale. Will break if a value
/// not from the typography scale is specified
/// @param {Number} $override-line-height [false] - line height value which will
/// override the line height retrieved from the breakpoint map
@mixin govuk-responsive-font-size($size, $override-line-height: false) {
  @if not map-has-key($govuk-typography-scale, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }

  $font-map: map-get($govuk-typography-scale, $size);

  @each $breakpoint, $breakpoint-map in $font-map {
    $font-size: map-get($breakpoint-map, "font-size");
    $font-size-rem: govuk-px-to-rem($font-size);

    $line-height: _govuk-line-height(
      $line-height: if($override-line-height, $override-line-height, map-get($breakpoint-map, "line-height")),
      $font-size: $font-size
    );

    // Mark rules as !important if $important is true - this will result in
    // these variables becoming strings, so this needs to happen *after* they
    // are used in calculations
    $font-size: $font-size;
    $font-size-rem: $font-size-rem;
    $line-height: $line-height;

    @if not $breakpoint {
      font-size: $font-size-rem;
      line-height: $line-height;
    } @else if $breakpoint == "print" {
      @include govuk-media-query($media-type: print) {
        font-size: $font-size;
        line-height: $line-height;
      }
    } @else {
      @include govuk-media-query($from: $breakpoint) {
        font-size: $font-size-rem;
        line-height: $line-height;
      }
    }
  }
}

/// 'Common typography' helper
///
/// Sets the font family and associated properties, such as font smoothing. Also
/// retrieves the correct font family by font weight and overrides the font for
/// print.
///
/// @param {List} $font-family [$govuk-font-family] Font family to use
/// @param {String} $weight [regular] - Specified font weight: `bold` or `regular`
/// @access public

@mixin govuk-typography($font-family: $govuk-font-family, $weight: regular) {
  font-family: $font-family;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  // If the user is using the default GDS Transport font we need to include
  // the font-face declarations.
  @if $govuk-include-default-font-face {
    @include _govuk-font-face-gds-transport;
  }

  @include govuk-media-query($media-type: print) {
    font-family: $govuk-font-family-print;
  }

  @if $weight == regular {
    font-weight: $govuk-font-weight-regular;
  } @else if $weight == bold {
    font-weight: $govuk-font-weight-bold;
  }
}

/// Tabular typography helper
///
/// Specifies CSS font settings for if a particular typographic element is tabular
/// data eg: a table of only numbers

@mixin govuk-typography-tabular {
  font-feature-settings: "tnum" 1;

  @supports (font-variant-numeric: tabular-nums) {
    font-feature-settings: normal;
    font-variant-numeric: tabular-nums;
  }
}
